import re

def add_labels(content, counter):
    labeled_content = f'.LABEL {counter}\n'
    labeled_content += f'SELECT \'{counter}\' as cb_delete\n'
    labeled_content += f'{content.strip()}\n'
    return labeled_content, counter + 1

# Path to the script file
script_path = 'C:\\Users\\id\\Desktop\\script.sql'

# Read the script content from the file
with open(script_path, 'r') as file:
    script_content = file.read()

# Split the script content into individual statements
statements = re.split(r';\s*', script_content.strip())

# Initialize variables
counter = 1
volatile_tables = set()
statements_with_volatile_refs = {}
current_block = []
in_volatile_block = False

# Patterns for volatile and permanent table creation
volatile_pattern = re.compile(r'CREATE\s+(MULTISET\s+)?VOLATILE\s+TABLE\s+(\w+)', re.IGNORECASE)
table_usage_pattern = re.compile(r'\b(\w+)\b')

# Pass 1: Identify volatile tables and their references
for idx, statement in enumerate(statements):
    statement = statement.strip()
    if not statement:
        continue
    # Check if the statement creates a volatile table
    match = volatile_pattern.search(statement)
    if match:
        table_name = match.group(2)
        volatile_tables.add(table_name.lower())
        continue
    
    # Store statements that reference volatile tables
    tables_in_statement = table_usage_pattern.findall(statement.lower())
    if any(table in volatile_tables for table in tables_in_statement):
        statements_with_volatile_refs[idx] = statement

# Debug: Print all identified volatile tables and statements referencing them
print(f"Volatile tables: {volatile_tables}")
print(f"Statements referencing volatile tables: {statements_with_volatile_refs}")

# Pass 2: Process and label statements
for idx, statement in enumerate(statements):
    statement = statement.strip()
    if not statement:
        continue

    if idx in statements_with_volatile_refs:
        # If the statement references volatile tables, ensure it's within the correct block
        if not in_volatile_block:
            # Label the previous block if needed
            if current_block:
                labeled_block, counter = add_labels('\n'.join(current_block), counter)
                labeled_statements.append(labeled_block)
                current_block = []
            in_volatile_block = True
        current_block.append(statement)
    else:
        # If the statement does not reference volatile tables
        if in_volatile_block:
            # Label the current block before starting a new one
            labeled_block, counter = add_labels('\n'.join(current_block), counter)
            labeled_statements.append(labeled_block)
            current_block = []
            in_volatile_block = False
        current_block.append(statement)

# Label any remaining statements in the current block
if current_block:
    labeled_block, counter = add_labels('\n'.join(current_block), counter)
    labeled_statements.append(labeled_block)

# Debug: Print all labeled statements
print(f"Labeled statements: {labeled_statements}")

# Add a semicolon after each labeled statement except for the last one
labeled_script = ';\n'.join(labeled_statements) + ';'

# Path to save the modified script
output_path = 'C:\\Users\\id\\Desktop\\script_labeled.sql'

# Write the modified script to a new file
with open(output_path, 'w') as file:
    file.write(labeled_script)
